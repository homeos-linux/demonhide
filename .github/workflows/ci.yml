name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    container:
      image: fedora:42
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        dnf update -y
        dnf install -y \
          wayland-devel \
          wayland-protocols-devel \
          glib2-devel \
          libX11-devel \
          libXfixes-devel \
          pkg-config \
          gcc \
          git \
          curl

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Verify Rust installation
      run: |
        rustc --version
        cargo --version
        rustup --version

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run tests
      run: cargo test --verbose

    - name: Build release
      run: cargo build --release --verbose

  build-multiple-targets:
    name: Build on multiple targets
    strategy:
      matrix:
        rust: [stable, 1.90.0]
    
    runs-on: ubuntu-latest
    container:
      image: fedora:42
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        dnf update -y
        dnf install -y \
          wayland-devel \
          wayland-protocols-devel \
          libX11-devel \
          libXcursor-devel \
          libxkbcommon-devel \
          libXi-devel \
          libxkbcommon-x11-devel \
          libxcb-devel \
          glib2-devel \
          pkg-config \
          gcc \
          git \
          curl

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}

    - name: Verify Rust installation
      run: |
        rustc --version
        cargo --version

    - name: Fix Cargo.lock version compatibility
      run: |
        rm -f Cargo.lock
        cargo generate-lockfile

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: fedora42-${{ matrix.rust }}

    - name: Build debug
      run: cargo build --verbose

    - name: Build release
      run: cargo build --release --verbose

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    container:
      image: fedora:42
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        dnf update -y
        dnf install -y gcc git curl

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Verify Rust installation
      run: |
        rustc --version
        cargo --version

    - name: Fix Cargo.lock version compatibility
      run: |
        rm -f Cargo.lock
        cargo generate-lockfile

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  check-dependencies:
    name: Check Dependencies
    runs-on: ubuntu-latest
    container:
      image: fedora:42
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        dnf update -y
        dnf install -y \
          wayland-devel \
          wayland-protocols-devel \
          glib2-devel \
          pkg-config \
          gcc \
          git \
          curl

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Verify Rust installation
      run: |
        rustc --version
        cargo --version

    - name: Fix Cargo.lock version compatibility
      run: |
        rm -f Cargo.lock
        cargo generate-lockfile

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2

    - name: Check if dependencies are up to date
      run: cargo update --dry-run

    - name: Check for unused dependencies
      run: |
        cargo install cargo-machete
        cargo machete