name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

  build-release:
    name: Build Release
    needs: create-release
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
        include:
          - target: x86_64-unknown-linux-gnu
            cross: false
          - target: aarch64-unknown-linux-gnu
            cross: true
    
    runs-on: ubuntu-latest
    container:
      image: fedora:42
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        dnf update -y
        dnf install -y \
          wayland-devel \
          wayland-protocols-devel \
          glib2-devel \
          pkg-config \
          gcc \
          git

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Fix Cargo.lock version compatibility
      run: |
        rm -f Cargo.lock
        cargo generate-lockfile

    - name: Install cross-compilation tools
      if: matrix.cross
      run: |
        cargo install cross
        dnf install -y gcc-aarch64-linux-gnu

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: fedora42-${{ matrix.target }}

    - name: Build release
      run: |
        if [ "${{ matrix.cross }}" = "true" ]; then
          cross build --release --target ${{ matrix.target }}
        else
          cargo build --release --target ${{ matrix.target }}
        fi

    - name: Create release archive
      run: |
        cd target/${{ matrix.target }}/release
        tar -czf demonhide-${{ matrix.target }}.tar.gz demonhide
        mv demonhide-${{ matrix.target }}.tar.gz ../../../

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./demonhide-${{ matrix.target }}.tar.gz
        asset_name: demonhide-${{ matrix.target }}.tar.gz
        asset_content_type: application/gzip